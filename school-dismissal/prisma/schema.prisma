// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  TEACHER
  DISMISSER
  ADMIN
}

enum DismissalMethod {
  CARPOOL
}

enum StudentStatus {
  AWAITING
  READY
  DISMISSED
}

enum ParentStatus {
  PENDING
  ARRIVED
  LATE
}

enum PickupEventStatus {
  QUEUED
  NOTIFIED
  READY
  DISMISSED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships based on role
  parentProfile    Parent?    @relation("UserParent")
  teacherProfile   Teacher?   @relation("UserTeacher")
  dismisserProfile Dismisser? @relation("UserDismisser")

  @@map("users")
}

model Parent {
  id           String       @id @default(cuid())
  userId       String       @unique
  user         User         @relation("UserParent", fields: [userId], references: [id], onDelete: Cascade)
  status       ParentStatus @default(PENDING)
  arrivalTime  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  authorizedStudents  Student_Parent[]      @relation("ParentStudents")
  queueEntries       CarlineQueueEntry[]   @relation("ParentQueueEntries")
  studentPickupEvents StudentPickupEvent[] @relation("ParentPickupEvents")

  @@map("parents")
}

model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation("UserTeacher", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  students Student[] @relation("TeacherStudents")

  @@map("teachers")
}

model Dismisser {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation("UserDismisser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  queueEntries        CarlineQueueEntry[]  @relation("DismisserQueueEntries")
  studentPickupEvents StudentPickupEvent[] @relation("DismisserPickupEvents")

  @@map("dismissers")
}

model Student {
  id               String          @id @default(cuid())
  name             String
  grade            String
  dismissalMethod  DismissalMethod @default(CARPOOL)
  status           StudentStatus   @default(AWAITING)
  assignedTeacherId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  assignedTeacher Teacher @relation("TeacherStudents", fields: [assignedTeacherId], references: [id])
  
  // Many-to-many with authorized parents
  authorizedParents Student_Parent[] @relation("StudentParents")

  // Events and queue entries
  queueEntries        CarlineQueueEntry_Student[]
  studentPickupEvents StudentPickupEvent[]        @relation("StudentPickupEvents")

  @@map("students")
}

// Junction table for Student-Parent many-to-many relationship
model Student_Parent {
  studentId String
  parentId  String
  student   Student @relation("StudentParents", fields: [studentId], references: [id], onDelete: Cascade)
  parent    Parent  @relation("ParentStudents", fields: [parentId], references: [id], onDelete: Cascade)

  @@id([studentId, parentId])
  @@map("student_parents")
}

model CarlineQueueEntry {
  id           String   @id @default(cuid())
  parentId     String
  position     Int
  createdById  String
  queuedAt     DateTime @default(now())
  processedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  parent    Parent    @relation("ParentQueueEntries", fields: [parentId], references: [id], onDelete: Cascade)
  createdBy Dismisser @relation("DismisserQueueEntries", fields: [createdById], references: [id])

  // Many-to-many with students in this queue entry
  students CarlineQueueEntry_Student[]

  // Related pickup events
  studentPickupEvents StudentPickupEvent[] @relation("QueueEntryPickupEvents")

  @@map("carline_queue_entries")
}

// Junction table for CarlineQueueEntry-Student many-to-many relationship
model CarlineQueueEntry_Student {
  queueEntryId String
  studentId    String
  queueEntry   CarlineQueueEntry @relation(fields: [queueEntryId], references: [id], onDelete: Cascade)
  student      Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([queueEntryId, studentId])
  @@map("carline_queue_entry_students")
}

model StudentPickupEvent {
  id                String             @id @default(cuid())
  studentId         String
  parentId          String
  dismissalMethod   DismissalMethod    @default(CARPOOL)
  status            PickupEventStatus  @default(QUEUED)
  notifiedTeacherAt DateTime?
  dismissedBy       String?
  dismissedAt       DateTime?
  queueEntryId      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  student          Student            @relation("StudentPickupEvents", fields: [studentId], references: [id])
  parent           Parent             @relation("ParentPickupEvents", fields: [parentId], references: [id])
  dismisser        Dismisser?         @relation("DismisserPickupEvents", fields: [dismissedBy], references: [id])
  linkedQueueEntry CarlineQueueEntry? @relation("QueueEntryPickupEvents", fields: [queueEntryId], references: [id])

  @@map("student_pickup_events")
}
